<?php

namespace IngSoft\DatBundle\Repository;

use Doctrine\ORM\EntityRepository;

use IngSoft\DatBundle\Entity\Proyectos as Proyectos;

/**
 * ProyectoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProyectoRepository extends EntityRepository
{
    /**
     * Permite crear un proyecto nuevo en la base de datos, el codigo del proyecto
     * no puede estar repetido
     * 
     * 
     * @param \IngSoft\DatBundle\Entity\Proyectos $proyecto
     *                                           proyecto nuevo en la base de datos
     * 
     * 
     * @return true si el proyecto se pudo agregar, false si no fue así
     * 
     */
    public function create(Proyectos $proyecto) {
        $em = $this->getEntityManager();
        $proyectoU = $em->find($this->getEntityName(), $proyecto->getCodigo());
        if (!$proyectoU) {
            $em->persist($proyecto);
            $em->flush();
            return true;
        }
        return false;
    }

     /**
     * Permite actualizar a un proyecto que se encuentre en la base de datos
     * el proyecto recibido tiene los atributos nuevos
     * 
     * 
     * @param \IngSoft\DatBundle\Entity\Proyectos $proyecto
     *                                           proyecto con los datos nuevos
     * 
     * @return true si se pudo actualizar, false si no fue así
     */
    public function update(Proyectos $proyecto) {
        $em = $this->getEntityManager();
        $proyectoU = $em->find($this->getEntityName(), $proyecto->getCodigo());
        if ($proyectoU) {
            $em->persist($proyecto);
            $em->flush();
            return true;
        }
        return false;
    }

    /**
     * Permite buscar a un proyecto según su cedula
     * 
     * 
     * @param type $id
     *        codigo del proyecto que se quiere buscar
     * 
     * @return proyecto encontrado
     * 
     */
    public function find($id) {
        $em = $this->getEntityManager();
        $proyectoU = $em->find($this->getEntityManager(), $id);
        return $proyectoU;
    }

    /**
     * Permite obtener todos los registros de los proyectos
     * 
     * 
     * @return todos los proyectos de la base de datos
     */
    public function getAll() {
        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT p FROM Proyectos p");
        return $query->getResult();
    }

    /**
     * Permite borrar a un proyecto según su cedula
     * 
     * 
     * @param type $id
     *             codigo del proyecto que se quiere borrar
     * 
     * @return true si se puede borrar, false si no fue así
     */
    public function delete($id) {
        $em = $this->getEntityManager();
        $proyectoU = $em->find($this->getEntityManager(), $id);
        if (!$proyectoU) {
            $em->remove($proyectoU);
            $em->flush();
            return true;
        }
        return false;
    }

}
